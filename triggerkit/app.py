"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/03_app.ipynb.

# %% auto 0
__all__ = ['logger', 'init']

# %% ../nbs/API/03_app.ipynb 3
import os
import sys
import logging
import argparse
from pathlib import Path
from typing import Dict, List, Callable, Optional, Any, Union
from . import core, snowflake, jobs

# %% ../nbs/API/03_app.ipynb 4
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('snowflake_actions.main')

# %% ../nbs/API/03_app.ipynb 5
def _parse_arguments(args=None):
    """Parse command line arguments.
    
    Args:
        args: Optional list of command line arguments. If None, will use sys.argv[1:].
        
    Returns:
        Parsed arguments namespace
    """
    parser = argparse.ArgumentParser(description='Snowflake Action System')
    
    parser.add_argument(
        '-c', '--config',
        default=os.environ.get('CONFIG_PATH', 'config.toml'),
        help='Path to TOML configuration file (default: config.toml or CONFIG_PATH env var)'
    )
    
    parser.add_argument(
        '--list-actions',
        action='store_true',
        help='List available actions and exit'
    )
    
    parser.add_argument(
        '--check-config',
        action='store_true',
        help='Check configuration file syntax and exit'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Enable verbose logging'
    )
    
    return parser.parse_args(args)

# %% ../nbs/API/03_app.ipynb 6
def init(config_path: str):
    """
    Initialize the application.
    
    Args:
        config_path: Path to TOML config file
        
    Returns:
        None
    """
    # Load configuration
    config = core.load_config(config_path)
    
    # Connect to Snowflake
    snowflake_config = core.config.get('snowflake', {})
    core.snowflake_connection = snowflake.connect(snowflake_config)
    
    # Register views from configuration file
    for view_config in config.get('views', []):
        register_view(
            view_config.get('name'),
            view_config.get('query'),
            {'description': view_config.get('description')}
        )
    
    # Store config for other components to access
    core.config = config
    
    # Set up email and Slack configurations for actions to use
    if 'email' in config:
        global EMAIL_CONFIG
        EMAIL_CONFIG = config['email']
    
    if 'slack' in config:
        global SLACK_CONFIG
        SLACK_CONFIG = config['slack']
    
    # Schedule jobs
    jobs.schedule_jobs(config)
    
    # Run the scheduler
    jobs.run_scheduler()

# %% ../nbs/API/03_app.ipynb 8
def _is_running_in_notebook():
    try:
        # This will only work in IPython/Jupyter environments
        from IPython import get_ipython
        if get_ipython() is not None:
            return True
        return False
    except ImportError:
        return False

# %% ../nbs/API/03_app.ipynb 9
if __name__ == "__main__" and not _is_running_in_notebook():
    main()
