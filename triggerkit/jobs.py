"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/02_jobs.ipynb.

# %% auto 0
__all__ = ['create', 'schedule_jobs', 'create_job_from_view', 'run_scheduler']

# %% ../nbs/API/02_jobs.ipynb 3
import schedule
from . import util
import time
from .snowflake import get_view_data
from .actions import run, register
from datetime import datetime, time as datetime_time
from typing import Dict, List, Callable, Optional, Any, Union

# %% ../nbs/API/02_jobs.ipynb 4
def create(view_name: str, action_names: Union[str, List[str]], job_name: Optional[str] = None):
    """
    Create a job function that fetches data from a view and runs specified actions.
    
    Args:
        view_name: Name of the registered view
        action_names: Name or list of names of registered actions
        job_name: Optional name for the job
        
    Returns:
        Job function
    """
    if isinstance(action_names, str):
        action_names = [action_names]
    
    if not job_name:
        job_name = f"{view_name}_{'_'.join(action_names)}_job"
    
    def job():
        util.logger.info(f"Running job '{job_name}' ...")
        try:
            # Fetch data from view
            data = get_view_data(view_name)
            
            # Run each action
            results = {}
            for action_name in action_names:
                results[action_name] = run(action_name, data)
            
            util.logger.info(f"Job '{job_name}' completed successfully")
            return results
        except Exception as e:
            util.logger.error(f"Job '{job_name}' failed: {str(e)}")
            raise
    
    job.__name__ = job_name
    return job

# %% ../nbs/API/02_jobs.ipynb 5
util.SCHEDULED_JOBS = {}

def schedule_jobs(config: Dict[str, Any]):
    """
    Schedule jobs based on TOML configuration.
    
    Args:
        config: Dictionary containing configuration sections
        
    Returns:
        None
    """
    jobs = config.get('jobs', [])
    
    for job_config in jobs:
        name = job_config.get('name')
        view_name = job_config.get('view')
        actions = job_config.get('actions', [])
        schedule_str = job_config.get('schedule')
        enabled = job_config.get('enabled', True)
        run_at = job_config.get('run_at')
        
        if not enabled:
            util.logger.info(f"Job '{name}' is disabled, skipping")
            continue
            
        if not all([view_name, actions, schedule_str]):
            util.logger.warning(f"Skipping invalid job configuration: {job_config}")
            continue
        
        job = create(view_name, actions, name)
        
        # Parse schedule string and set up schedule
        schedule_parts = schedule_str.split()
        if len(schedule_parts) >= 3 and schedule_parts[0] == "every":
            try:
                interval = int(schedule_parts[1])
                unit = schedule_parts[2].lower()
                
                scheduler = None
                if unit in ('minute', 'minutes'):
                    scheduler = schedule.every(interval).minutes
                elif unit in ('hour', 'hours'):
                    scheduler = schedule.every(interval).hours
                elif unit in ('day', 'days'):
                    scheduler = schedule.every(interval).days
                else:
                    util.logger.warning(f"Unsupported schedule unit: {unit}")
                    continue
                
                # Add specific time if provided
                if run_at and unit in ('day', 'days'):
                    try:
                        hour, minute = map(int, run_at.split(':'))
                        run_time = datetime_time(hour=hour, minute=minute)
                        scheduler = scheduler.at(run_at)
                    except (ValueError, AttributeError):
                        util.logger.warning(f"Invalid run_at time format: {run_at}, expected HH:MM. Using default.")
                
                scheduler.do(job)
                util.logger.info(f"Scheduled job '{name}' for view '{view_name}' with actions {actions} to run {schedule_str}" + 
                           (f" at {run_at}" if run_at and unit in ('day', 'days') else ""))
                util.SCHEDULED_JOBS[name] = {
                    'actions': actions,
                    'view_name': view_name,
                    'schedule_str': schedule_str,
                    'run_at': run_at
                    }
            except ValueError:
                util.logger.warning(f"Invalid schedule format: {schedule_str}")
                continue
        else:
            util.logger.warning(f"Unsupported schedule format: {schedule_str}")
            continue

# %% ../nbs/API/02_jobs.ipynb 6
@register('Create Job From View','Creates scheduled jobs for views that have job configuration.')
def create_job_from_view(data):
    """
    Create new jobs from views that have job configuration.
    """
    for view in data:
        view_data = get_view_data(view)
        if not view_data:
            util.logger.warning(f"No data returned from view: {view}")
            continue

        first_row = view_data[0]

        config_col = 'config' if 'config' in first_row else 'tk_config'
        
        name = first_row[config_col].get('name', view)
        view_name = first_row[config_col].get('view')
        actions = first_row[config_col].get('actions', [])
        schedule_str = first_row[config_col].get('schedule')
        enabled = first_row[config_col].get('enabled', True)
        run_at = first_row[config_col].get('run_at')
        
        if not enabled:
            util.logger.info(f"Job '{name}' is disabled, skipping")
            continue
            
        if not all([view_name, actions, schedule_str]) and not all([name, actions, run_at]):
            util.logger.warning(f"Skipping invalid job configuration: {view}")
            continue
        
        if name in util.SCHEDULED_JOBS and actions == util.SCHEDULED_JOBS[name]['actions'] and view_name == view and schedule_str == util.SCHEDULED_JOBS[name]['schedule_str'] and run_at == util.SCHEDULED_JOBS[name]['run_at']:
            util.logger.warning(f"Job '{name}' already exists, skipping")
            continue

        job = create(view_name, actions, name)
        
        # Parse schedule string and set up schedule
        schedule_parts = schedule_str.split()
        if len(schedule_parts) >= 3 and schedule_parts[0] == "every":
            try:
                interval = int(schedule_parts[1])
                unit = schedule_parts[2].lower()
                
                scheduler = None
                if unit in ('minute', 'minutes'):
                    scheduler = schedule.every(interval).minutes
                elif unit in ('hour', 'hours'):
                    scheduler = schedule.every(interval).hours
                elif unit in ('day', 'days'):
                    scheduler = schedule.every(interval).days
                else:
                    util.logger.warning(f"Unsupported schedule unit: {unit}")
                    continue
                
                # Add specific time if provided
                if run_at and unit in ('day', 'days'):
                    try:
                        hour, minute = map(int, run_at.split(':'))
                        run_time = datetime_time(hour=hour, minute=minute)
                        scheduler = scheduler.at(run_at)
                    except (ValueError, AttributeError):
                        util.logger.warning(f"Invalid run_at time format: {run_at}, expected HH:MM. Using default.")
                
                scheduler.do(job)
                util.logger.info(f"AUTO SCHEDULED job '{name}' based on view '{view_name}' with actions {actions} to run {schedule_str}" + 
                           (f" at {run_at}" if run_at and unit in ('day', 'days') else ""))
                util.SCHEDULED_JOBS[name] = {
                    'actions': actions,
                    'view_name': view_name,
                    'schedule_str': schedule_str,
                    'run_at': run_at
                    }
            except ValueError:
                util.logger.warning(f"Invalid schedule format: {schedule_str}")
                continue
        else:
            util.logger.warning(f"Unsupported schedule format: {schedule_str}")
            continue

# %% ../nbs/API/02_jobs.ipynb 7
def run_scheduler():
    """Run the scheduler loop."""
    util.logger.info("Starting scheduler")
    while True:
        schedule.run_pending()
        time.sleep(1)
