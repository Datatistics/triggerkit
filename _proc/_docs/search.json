[
  {
    "objectID": "API/actions.html",
    "href": "API/actions.html",
    "title": "actions",
    "section": "",
    "text": "When your views yields results, what TriggerKit performs are actions. These are functions that take in results and perform things like send slack messages, perform SQL operations, make API calls, etc.\nYou can either use some of our built-in actions or build your own!",
    "crumbs": [
      "API",
      "actions"
    ]
  },
  {
    "objectID": "API/actions.html#built-in-actions",
    "href": "API/actions.html#built-in-actions",
    "title": "actions",
    "section": "Built In Actions:",
    "text": "Built In Actions:\n\nsource\n\nrun_sql\n\n run_sql (data)\n\n\nsource\n\n\nsend_slack_message\n\n send_slack_message (data)\n\nUse the returned data to send slack messages. This could be used for creating alerts for data issues, reporting on metrics, etc.",
    "crumbs": [
      "API",
      "actions"
    ]
  },
  {
    "objectID": "API/actions.html#make-your-own-actions",
    "href": "API/actions.html#make-your-own-actions",
    "title": "actions",
    "section": "Make Your Own Actions",
    "text": "Make Your Own Actions\nIt is simple to make your own actions. All you have to do is make a function that takes in a List of Dicts and register it with the system\n\nsource\n\nregister\n\n register (name:str, description:Optional[str]=None)\n\n*Register your function as an action in the global registry.\nArgs:\n• name: Descriptive name for your action\n• description: Optional description of what the action does\nRaises:\n• ValueError: If an action with the same name already exists*\n\nsource\n\n\nget_info\n\n get_info (name:str)\n\nGet detailed information about a specific action.\n\nsource\n\n\nlist_available\n\n list_available ()\n\nList all registered actions with their descriptions.\n\nsource\n\n\nrun\n\n run (action_name:str, data:List[Dict[str,Any]])\n\n*Run a registered action with the provided data.\nArgs: action_name: Name of the registered action data: Data to pass to the action\nReturns: Result of the action*",
    "crumbs": [
      "API",
      "actions"
    ]
  },
  {
    "objectID": "API/jobs.html",
    "href": "API/jobs.html",
    "title": "jobs",
    "section": "",
    "text": "source\n\ncreate\n\n create (view_name:str, action_names:Union[str,List[str]],\n         job_name:Optional[str]=None)\n\n*Create a job function that fetches data from a view and runs specified actions.\nArgs: view_name: Name of the registered view action_names: Name or list of names of registered actions job_name: Optional name for the job\nReturns: Job function*\n\nsource\n\n\nschedule_jobs\n\n schedule_jobs (config:Dict[str,Any])\n\n*Schedule jobs based on TOML configuration.\nArgs: config: Dictionary containing configuration sections\nReturns: None*\n\nsource\n\n\nrun_scheduler\n\n run_scheduler ()\n\nRun the scheduler loop.",
    "crumbs": [
      "API",
      "jobs"
    ]
  },
  {
    "objectID": "API/database/snowflake.html",
    "href": "API/database/snowflake.html",
    "title": "snowflake",
    "section": "",
    "text": "source\n\nregister_view\n\n register_view (name:str, query:str,\n                metadata:Optional[Dict[str,Any]]=None)\n\n*Register a Snowflake view with the system.\nArgs: name: Name of the view query: SQL query or view name to fetch datay metadata: Additional metadata about the view\nReturns: None*\n\nsource\n\n\nconnect\n\n connect (config:Dict[str,Any])\n\n*Establish connection to Snowflake.\nArgs: config: Dictionary containing Snowflake connection parameters\nReturns: Snowflake connection object*\n\nsource\n\n\nquery\n\n query (view_name:str)\n\n*Execute a query for a registered view and return results.\nArgs: view_name: Name of the registered view\nReturns: List of result rows as dictionaries*",
    "crumbs": [
      "API",
      "database",
      "snowflake"
    ]
  },
  {
    "objectID": "API/.ipynb.html",
    "href": "API/.ipynb.html",
    "title": "core",
    "section": "",
    "text": "source\n\nload_config\n\n load_config (config_path:str)\n\n*Load configuration from TOML file.\nArgs: config_path: Path to TOML config file\nReturns: Dictionary containing configuration sections*",
    "crumbs": [
      "API",
      "core"
    ]
  },
  {
    "objectID": "API/app.html",
    "href": "API/app.html",
    "title": "app",
    "section": "",
    "text": "source\n\ninit\n\n init (config_path:str)\n\n*Initialize the application.\nArgs: config_path: Path to TOML config file\nReturns: None*",
    "crumbs": [
      "API",
      "app"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TriggerKit",
    "section": "",
    "text": "This system allows you to:\n\nDefine Snowflake views to monitor\nSchedule when to check these views for new data\nConfigure actions to trigger when data is available\nExtend with custom actions for your specific needs\n\n\n\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/Datatistics/triggerkit.git\nor from pypi\n$ pip install triggerkit",
    "crumbs": [
      "TriggerKit"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "TriggerKit",
    "section": "",
    "text": "This system allows you to:\n\nDefine Snowflake views to monitor\nSchedule when to check these views for new data\nConfigure actions to trigger when data is available\nExtend with custom actions for your specific needs\n\n\n\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/Datatistics/triggerkit.git\nor from pypi\n$ pip install triggerkit",
    "crumbs": [
      "TriggerKit"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "TriggerKit",
    "section": "Usage",
    "text": "Usage\nRun the system with your configuration file:\n# Using default config.toml in current directory\nsnowflake-actions\n\n# Or specify a config file\nsnowflake-actions --config /path/to/your/config.toml\n\n# To check your configuration file syntax\nsnowflake-actions --check-config\n\n# To list available actions\nsnowflake-actions --list-actions\n\n# For verbose logging\nsnowflake-actions --verbose",
    "crumbs": [
      "TriggerKit"
    ]
  },
  {
    "objectID": "index.html#creating-custom-actions",
    "href": "index.html#creating-custom-actions",
    "title": "TriggerKit",
    "section": "Creating Custom Actions",
    "text": "Creating Custom Actions\nYou can extend the system with your own custom actions:\nimport triggerkit as tk\n\n@tk.register(\"my_custom_action\", \"Description of what this action does\")\ndef my_custom_action(data: List[Dict]):\n    \"\"\"\n    Takes in records from Snowflake view and processes them how you want.\n    \n    Args:\n        data: List of records from Snowflake\n        \n    Returns:\n        Dictionary with action results\n    \"\"\"\n    # Your custom logic here\n    return {\"processed\": len(data)}",
    "crumbs": [
      "TriggerKit"
    ]
  },
  {
    "objectID": "index.html#environment-variables",
    "href": "index.html#environment-variables",
    "title": "TriggerKit",
    "section": "Environment Variables",
    "text": "Environment Variables\n\nCONFIG_PATH: Path to the TOML configuration file\nSNOWFLAKE_PASSWORD: Snowflake password (recommended over storing in config)\nLOG_LEVEL: Set the logging level (DEBUG, INFO, WARNING, ERROR)",
    "crumbs": [
      "TriggerKit"
    ]
  },
  {
    "objectID": "index.html#built-in-actions",
    "href": "index.html#built-in-actions",
    "title": "TriggerKit",
    "section": "Built-in Actions",
    "text": "Built-in Actions\nThe system comes with several built-in actions:\n\nsend_alert: Sends email and Slack notifications\nlog_incident: Records incidents in a tracking system\ngenerate_report: Creates summary reports from data",
    "crumbs": [
      "TriggerKit"
    ]
  }
]