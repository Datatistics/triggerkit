[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TriggerKit",
    "section": "",
    "text": "This system allows you to:\n\nDefine Snowflake views to monitor\nSchedule when to check these views for new data\nConfigure actions to trigger when data is available\nExtend with custom actions for your specific needs\n\n\n\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/Datatistics/triggerkit.git\nor from pypi\n$ pip install triggerkit"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "TriggerKit",
    "section": "",
    "text": "This system allows you to:\n\nDefine Snowflake views to monitor\nSchedule when to check these views for new data\nConfigure actions to trigger when data is available\nExtend with custom actions for your specific needs\n\n\n\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/Datatistics/triggerkit.git\nor from pypi\n$ pip install triggerkit"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "TriggerKit",
    "section": "Usage",
    "text": "Usage\nRun the system with your configuration file:\n# Using default config.toml in current directory\nsnowflake-actions\n\n# Or specify a config file\nsnowflake-actions --config /path/to/your/config.toml\n\n# To check your configuration file syntax\nsnowflake-actions --check-config\n\n# To list available actions\nsnowflake-actions --list-actions\n\n# For verbose logging\nsnowflake-actions --verbose"
  },
  {
    "objectID": "index.html#creating-custom-actions",
    "href": "index.html#creating-custom-actions",
    "title": "TriggerKit",
    "section": "Creating Custom Actions",
    "text": "Creating Custom Actions\nYou can extend the system with your own custom actions:\nimport triggerkit as tk\n\n@tk.register(\"my_custom_action\", \"Description of what this action does\")\ndef my_custom_action(data: List[Dict]):\n    \"\"\"\n    Takes in records from Snowflake view and processes them how you want.\n    \n    Args:\n        data: List of records from Snowflake\n        \n    Returns:\n        Dictionary with action results\n    \"\"\"\n    # Your custom logic here\n    return {\"processed\": len(data)}"
  },
  {
    "objectID": "index.html#environment-variables",
    "href": "index.html#environment-variables",
    "title": "TriggerKit",
    "section": "Environment Variables",
    "text": "Environment Variables\n\nCONFIG_PATH: Path to the TOML configuration file\nSNOWFLAKE_PASSWORD: Snowflake password (recommended over storing in config)\nLOG_LEVEL: Set the logging level (DEBUG, INFO, WARNING, ERROR)"
  },
  {
    "objectID": "index.html#built-in-actions",
    "href": "index.html#built-in-actions",
    "title": "TriggerKit",
    "section": "Built-in Actions",
    "text": "Built-in Actions\nThe system comes with several built-in actions:\n\nsend_alert: Sends email and Slack notifications\nlog_incident: Records incidents in a tracking system\ngenerate_report: Creates summary reports from data"
  },
  {
    "objectID": "API/app.html",
    "href": "API/app.html",
    "title": "app",
    "section": "",
    "text": "source\n\nmain\n\n main (args=None)\n\n*Main entry point for the application.\nArgs: args: Optional list of command line argument strings, or parsed args object. If None, will parse from command line.*",
    "crumbs": [
      "Home",
      "API",
      "app"
    ]
  },
  {
    "objectID": "API/actions.html",
    "href": "API/actions.html",
    "title": "actions",
    "section": "",
    "text": "When your views yields results, what TriggerKit performs are actions. These are functions that take in results and perform things like send slack messages, perform SQL operations, make API calls, etc.\nYou can either use some of our built-in actions or build your own!",
    "crumbs": [
      "Home",
      "API",
      "actions"
    ]
  },
  {
    "objectID": "API/actions.html#built-in-actions",
    "href": "API/actions.html#built-in-actions",
    "title": "actions",
    "section": "Built In Actions:",
    "text": "Built In Actions:\n\nsource\n\nrun_sql\n\n run_sql (data)\n\n\nsource\n\n\nsend_slack_message\n\n send_slack_message (data)\n\nUse the returned data to send slack messages. This could be used for creating alerts for data issues, reporting on metrics, etc.",
    "crumbs": [
      "Home",
      "API",
      "actions"
    ]
  },
  {
    "objectID": "API/actions.html#make-your-own-actions",
    "href": "API/actions.html#make-your-own-actions",
    "title": "actions",
    "section": "Make Your Own Actions",
    "text": "Make Your Own Actions\nIt is simple to make your own actions. All you have to do is make a function that takes in a List of Dicts and register it with the system\n\nsource\n\nregister\n\n register (name:str, description:Optional[str]=None)\n\n*Register your function as an action in the global registry.\nArgs:\n• name: Descriptive name for your action\n• description: Optional description of what the action does\nRaises:\n• ValueError: If an action with the same name already exists*\n\nsource\n\n\nget_info\n\n get_info (name:str)\n\nGet detailed information about a specific action.\n\nsource\n\n\nlist_available\n\n list_available ()\n\nList all registered actions with their descriptions.\n\nsource\n\n\nrun\n\n run (action_name:str, data:List[Dict[str,Any]])\n\n*Run a registered action with the provided data.\nArgs: action_name: Name of the registered action data: Data to pass to the action\nReturns: Result of the action*",
    "crumbs": [
      "Home",
      "API",
      "actions"
    ]
  },
  {
    "objectID": "API/database/snowflake.html",
    "href": "API/database/snowflake.html",
    "title": "snowflake",
    "section": "",
    "text": "source\n\nregister_view\n\n register_view (name:str, query:str,\n                metadata:Optional[Dict[str,Any]]=None)\n\n*Register a Snowflake view with the system.\nArgs: name: Name of the view query: SQL query or view name to fetch datay metadata: Additional metadata about the view\nReturns: None*\n\nsource\n\n\nregister_views\n\n register_views (data:List[Dict[str,Any]])\n\nRegisters all views in data with VIEW_REGISTRY.\n\nsource\n\n\nconnect\n\n connect (sf_config:Dict[str,Any])\n\n*Establish connection to Snowflake.\nArgs: sf_config: Dictionary containing Snowflake connection parameters\nReturns: Snowflake connection object*\n\nsource\n\n\nget_view_data\n\n get_view_data (view_name:str)\n\n*Execute a query for a registered view and return results.\nArgs: view_name: Name of the registered view\nReturns: List of result rows as dictionaries*\n\nsource\n\n\nquery\n\n query (sql_query:str)\n\n*Execute a query and return results.\nArgs: sql_query: SQL query to execute\nReturns: List of result rows as dictionaries*\n\nsource\n\n\nget_ddl_and_register\n\n get_ddl_and_register (data)\n\nFor each view in data, retrieve the DDL and register the view.\n\nsource\n\n\nextract_view_sql\n\n extract_view_sql (ddl:str)\n\n*Extracts the SQL query from a Snowflake view definition.\nArgs: ddl: Snowflake view definition\nReturns: Extracted SQL query*\n\nsource\n\n\ninit_view_registry\n\n init_view_registry (config:Dict[str,Any])\n\n*Starts View Registry by including all locally defined views and including all views located in the the schema defined in the configuration file.\nArgs: config: Dictionary containing view configurations\nReturns: None*"
  },
  {
    "objectID": "Explanations/configurations.html#view-configuration",
    "href": "Explanations/configurations.html#view-configuration",
    "title": "Configuration Options",
    "section": "View Configuration",
    "text": "View Configuration",
    "crumbs": [
      "Home",
      "Explanations",
      "Configuration Options"
    ]
  },
  {
    "objectID": "Explanations/configurations.html#job-configuration",
    "href": "Explanations/configurations.html#job-configuration",
    "title": "Configuration Options",
    "section": "Job Configuration",
    "text": "Job Configuration",
    "crumbs": [
      "Home",
      "Explanations",
      "Configuration Options"
    ]
  },
  {
    "objectID": "Explanations/about.html",
    "href": "Explanations/about.html",
    "title": "What is TriggerKit?",
    "section": "",
    "text": "TriggerKit is a python package made to help you build smarter data system. It was designed to fill a need the creator saw, it can be hard to make data actionable. It shouldn’t be hard, or expensive, to keep people informed about issues or ___.\nNunc ac dignissim magna. Vestibulum vitae egestas elit. Proin feugiat leo quis ante condimentum, eu ornare mauris feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris cursus laoreet ex, dignissim bibendum est posuere iaculis. Suspendisse et maximus elit. In fringilla gravida ornare. Aenean id lectus pulvinar, sagittis felis nec, rutrum risus. Nam vel neque eu arcu blandit fringilla et in quam. Aliquam luctus est sit amet vestibulum eleifend. Phasellus elementum sagittis molestie. Proin tempor lorem arcu, at condimentum purus volutpat eu. Fusce et pellentesque ligula. Pellentesque id tellus at erat luctus fringilla. Suspendisse potenti.",
    "crumbs": [
      "Home",
      "Explanations",
      "What is TriggerKit?"
    ]
  },
  {
    "objectID": "Explanations/about.html#general-design",
    "href": "Explanations/about.html#general-design",
    "title": "What is TriggerKit?",
    "section": "General Design",
    "text": "General Design\nTriggerKit is pretty simple, you define a query or view that it should monitor, when it should check it, and what it should do if there are any results:\n\n\n\n\n\n---\ntitle: TriggerKit Design\n---\nflowchart LR\n  A[(Snowflake)] -- Results --&gt; B((TriggerKit))\n  B -..-&gt; C(Send Slack)\n  B -..-&gt; D(Run SQL)\n  B ---&gt; E(API Call)\n  B -..-&gt; F(Trigger DAG)",
    "crumbs": [
      "Home",
      "Explanations",
      "What is TriggerKit?"
    ]
  },
  {
    "objectID": "API/jobs.html",
    "href": "API/jobs.html",
    "title": "jobs",
    "section": "",
    "text": "source\n\ncreate\n\n create (view_name:str, action_names:Union[str,List[str]],\n         job_name:Optional[str]=None)\n\n*Create a job function that fetches data from a view and runs specified actions.\nArgs: view_name: Name of the registered view action_names: Name or list of names of registered actions job_name: Optional name for the job\nReturns: Job function*\n\nsource\n\n\nschedule_jobs\n\n schedule_jobs (config:Dict[str,Any])\n\n*Schedule jobs based on TOML configuration.\nArgs: config: Dictionary containing configuration sections\nReturns: None*\n\nsource\n\n\ncreate_job_from_view\n\n create_job_from_view (data)\n\nCreate new jobs from views that have job configuration.\n\nsource\n\n\nrun_scheduler\n\n run_scheduler ()\n\nRun the scheduler loop.",
    "crumbs": [
      "Home",
      "API",
      "jobs"
    ]
  },
  {
    "objectID": "API/util.html",
    "href": "API/util.html",
    "title": "util",
    "section": "",
    "text": "source\n\nload_config\n\n load_config (config_path:str)\n\n*Load configuration from TOML file with environment variable interpolation.\nArgs: config_path: Path to TOML config file\nReturns: Dictionary containing configuration sections with env vars expanded*",
    "crumbs": [
      "Home",
      "API",
      "util"
    ]
  },
  {
    "objectID": "Tutorials/getting started.html",
    "href": "Tutorials/getting started.html",
    "title": "Getting Started",
    "section": "",
    "text": "In this tutorial, we will show you how to use and setup TriggerKit!\n\n1. Download TriggerKit\nYou can either install latest from the GitHub repository:\n$ pip install git+https://github.com/Datatistics/triggerkit.git\nor from [pypi][pypi]\n$ pip install triggerkit\n\n\n2. Setup Database Connection\n\n\n\n\n\n\nImportant\n\n\n\nRight now, TriggerKit only suports connections to Snowflake, but we may add support for other databases downt the line.\n\n\nYou can establish TriggerKit’s connection to your Snowflake through your config.toml file:\n[snowflake]\nuser = \"your_username\"\npassword = \"${SNOWFLAKE_PASSWORD}\"  # Use $ or ${} to import enviromental variables\naccount = \"your_account\"\nwarehouse = \"your_warehouse\"\ndatabase = \"your_database\"\nschema = \"your_schema\"\nrole = \"${SNOWFLAKE_ROLE-ACCOUNTADMIN}\" # You can also set defaults using a \"-\" i.e. ${ENVIRON-defualt_value}\nIf you would like TriggerKit to automatically import all of the views in a schema on startup, you can specify check_schema. To have it recheck this schema periodically, you can also specify schema_check_freq and triggerkit will create a job for itself to import any new views in the schema as views you can create jobs/actions for.\n\n[snowflake]\n...\ncheck_schema        = \"TK_ACTIONS\"              # Name of whatever schema you want to use\nschema_check_freq   = \"every 15 minutes\"        # How often you would like TK to recheck the schedma\n\n\n\n\n\n\nNote\n\n\n\nWe recommend setting up since it makes configuring TriggerKikt easier. For the rest of this tutorial, we will assume that you’ve taken advatage of this feature, but you can also configure the views isued bellow as shown in the example_config file\n\n\n\n\n3. Create Your First Trigger and Action\nVestibulum ultrices, tortor at mattis porta, odio nisi rutrum nulla, sit amet tincidunt eros quam facilisis tellus. Fusce eleifend lectus in elementum lacinia. Nam auctor nunc in massa ullamcorper, sit amet auctor ante accumsan. Nam ut varius metus. Curabitur eget tristique leo. Cras finibus euismod erat eget elementum. Integer vel placerat ex. Ut id eros quis lectus lacinia venenatis hendrerit vel ante.",
    "crumbs": [
      "Home",
      "Tutorials",
      "Getting Started"
    ]
  }
]